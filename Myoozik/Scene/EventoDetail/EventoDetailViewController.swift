//
//  EventoDetailViewController.swift
//  Myoozik
//
//  Created by Alessandro Bolattino on 24/04/18.
//  Copyright (c) 2018 Mussini SAS. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Hero
import MapKit

protocol EventoDetailDisplayLogic: class
{
  func displayDetail(viewModel: EventoDetail.FetchEventoDetail.ViewModel)
}

class EventoDetailViewController: UIViewController, EventoDetailDisplayLogic
{
  var interactor: EventoDetailBusinessLogic?
  var router: (NSObjectProtocol & EventoDetailRoutingLogic & EventoDetailDataPassing)?
  var panGR = UIPanGestureRecognizer()
    
  let cover = EvidenzaView()
    
  let artistsTitle = TitleBoldLabel()
  let whereTitle = TitleBoldLabel()
  let infosTitle = TitleBoldLabel()
    
  let mapView = MKMapView()
  let infosText = TextLabel()
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = EventoDetailInteractor()
    let presenter = EventoDetailPresenter()
    let router = EventoDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    getDetail()
    
    
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func getDetail()
  {
    let request = EventoDetail.FetchEventoDetail.Request()
    interactor?.getDetail(request: request)
  }
  
  func displayDetail(viewModel: EventoDetail.FetchEventoDetail.ViewModel)
  {
    //nameTextField.text = viewModel.name
    
    if let evento = viewModel.evento , let band = viewModel.band {
    
        let scrollView = UIScrollView().addTo(view: self.view).setSize(of: self.view).setCenter(of: self.view)
        
        cover.addTo(view: scrollView).setSize(width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.width).setPosition(top: 0, right: 0, left: 0)
        
        self.hero.isEnabled = true
        cover.hero.id = "ironMan"
        
        
        self.panGR = UIPanGestureRecognizer(target: self, action: #selector(leftSwipeDismiss(gestureRecognizer:)))
        self.view.addGestureRecognizer(panGR)
        
        artistsTitle.addTo(view: scrollView).setPosition(right: 20, left: 20).setAnchor(top: 20, to: cover)
        
        let artistView = UIView().addTo(view: scrollView).setPosition(right: 20, left: 20).setAnchor(top: 10, to: artistsTitle)
        let artistCover = UIImageView()
        artistCover.addTo(view: artistView).setSize(width: 120, height: 120).setPosition(top: 10, bottom: 10, left: 10).setBackground(color: .white)
        
        let artistName = TitleLabel()
        artistName.addTo(view: artistView).setPosition(right: 0).setAnchor(leading: 15, to: artistCover).setCenter(y: artistCover)
        artistName.setText(color: .white)
        artistName.set(text: "viewModel.band?")
        
        whereTitle.addTo(view: scrollView).setPosition(right: 20, left: 20).setAnchor(top: 20, to: artistView)
        
        
        mapView.addTo(view: scrollView).setPosition(right: 0, left: 0).setSize(height: 250).setAnchor(top: 10, to: whereTitle)
        mapView.isZoomEnabled = false
        mapView.isScrollEnabled = false
        
        infosTitle.addTo(view: scrollView).setPosition(right: 20, left: 20).setAnchor(top: 20, to: mapView)
        
        infosText.addTo(view: scrollView).setPosition(right: 20, bottom: 40, left: 20).setAnchor(top: 10, to: infosTitle)
        infosText.set(text: "")
        infosText.setText(color: .white)
        
        artistsTitle.set(text: "Si esibiranno")
        whereTitle.set(text: "Dove?")
        infosTitle.set(text: "Altre informazioni")
        
    }
    
  }
    
    @objc func leftSwipeDismiss(gestureRecognizer:UIPanGestureRecognizer) {
        
        let translation = panGR.translation(in: nil)
        let progress = translation.x / 2 / view.bounds.width
        let gestureView = gestureRecognizer.location(in: self.view)
        
        switch panGR.state {
        case .began:
            
            if gestureView.x <= 30 {
                hero_dismissViewController()
            }
            
        case .changed:
            
            let translation = panGR.translation(in: nil)
            let progress = translation.x / 2 / view.bounds.width
            Hero.shared.update(progress)
            
        default:
            if progress + panGR.velocity(in: nil).x / view.bounds.width > 0.3 {
                Hero.shared.finish()
            } else {
                Hero.shared.cancel()
            }
        }
        
    }
}
